{
	"info": {
		"_postman_id": "1ff1fcc6-beba-49b4-ab10-3b635f24413b",
		"name": "ReqRes API â€” All Endpoints (with API key)",
		"description": "Ready-to-use Postman collection for ReqRes (https://reqres.in).\nIncludes:\n- All common endpoints (users, resources, auth, delayed response)\n- Collection-level API Key auth (x-api-key)\n- Example request bodies\n- Minimal tests and token capture",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47700116",
		"_collection_link": "https://shobuj-chandra-7249178.postman.co/workspace/Shobuj's-Workspace~5d741241-bfc7-42d4-8d29-aa5f5da64d05/collection/47700116-1ff1fcc6-beba-49b4-ab10-3b635f24413b?action=share&source=collection_link&creator=47700116"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"var status_code = pm.response.code;",
									"",
									"switch(status_code){",
									"    case 200:",
									"        pm.test(\"Status code name has string\", function () {",
									"            pm.response.to.have.status(\"OK\");",
									"        });",
									"",
									"        pm.test(\"Status is 200 OK\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"Response time is less than 250ms\", function () {",
									"            pm.expect(pm.response.responseTime).to.be.below(250);",
									"        });",
									"",
									"        pm.test(\"Verify Page:2\", function(){",
									"            pm.expect(responseData.page).to.eql(2);",
									"        });",
									"        ",
									"        pm.test(\"Verify Per Page:6\", function(){",
									"            pm.expect(responseData.per_page).to.eql(6);",
									"        });",
									"",
									"        pm.test(\"Verify Total Pages:2\", function(){",
									"            pm.expect(responseData.total_pages).to.eql(2);",
									"        });",
									"",
									"        pm.test(\"Verify required fields are present\", function(){",
									"            pm.expect(responseData).to.have.property('data');",
									"            pm.expect(responseData).to.have.property('support');",
									"            pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
									"",
									"            responseData.data.forEach(user => {",
									"                pm.expect(user).to.have.property('id');",
									"                pm.expect(user).to.have.property('email');",
									"                pm.expect(user).to.have.property('first_name');",
									"                pm.expect(user).to.have.property('last_name');",
									"                pm.expect(user).to.have.property('avatar');",
									"            });",
									"        });",
									"",
									"        pm.test(\"Verify JSON response schema\", function() {",
									"            pm.expect(responseData).to.be.an('object').that.includes.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
									"            pm.expect(responseData.support).to.have.all.keys('url', 'text');",
									"        });",
									"",
									"        break;",
									"",
									"    case 400:",
									"        pm.expect(status_code).to.eql(400);",
									"        break;",
									"",
									"    case 500:",
									"        pm.expect(status_code).to.eql(500);",
									"        default:",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users?page={{page}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"var status_code = pm.response.code;",
									"",
									"switch(status_code){",
									"    case 200:",
									"        pm.test(\"Status is 200 OK\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"Response time is less than 250ms\", function () {",
									"            pm.expect(pm.response.responseTime).to.be.below(250);",
									"        });",
									"",
									"        pm.test(\"Verify required fields are present\", function(){",
									"            pm.expect(responseData).to.have.property('data');",
									"            pm.expect(responseData).to.have.property('support');",
									"",
									"            // Check if data is an object and not an array",
									"            pm.expect(responseData.data).to.be.an('object');",
									"            pm.expect(responseData.data).to.have.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
									"        });",
									"",
									"        pm.test(\"Verify user id\", function(){",
									"            pm.expect(responseData.data.id).to.eql(2);",
									"        });",
									"",
									"        pm.test(\"Verify user email\", function(){",
									"            pm.expect(responseData.data.email).to.eql(\"janet.weaver@reqres.in\");",
									"        });",
									"",
									"        pm.test(\"Verify user first name\", function(){",
									"            pm.expect(responseData.data.first_name).to.eql(\"Janet\");",
									"        });",
									"",
									"        pm.test(\"Verify user last name\", function(){",
									"            pm.expect(responseData.data.last_name).to.eql(\"Weaver\");",
									"        });",
									"",
									"        pm.test(\"Verify user avatar\", function(){",
									"            pm.expect(responseData.data.avatar).to.eql(\"https://reqres.in/img/faces/2-image.jpg\");",
									"        });",
									"",
									"        pm.test(\"Verify text\", function(){",
									"            pm.expect(responseData.support.text).to.eql(\"Tired of writing endless social media content? Let Content Caddy generate it for you.\");",
									"        });",
									"",
									"        // Expected keys for top level",
									"        const expectedTopKeys = [\"data\", \"support\"];",
									"        pm.test(\"Verify no extra top-level fields\", function () {",
									"            pm.expect(Object.keys(responseData)).to.have.members(expectedTopKeys);",
									"        });",
									"",
									"        // Expected keys for \"data\" object",
									"        const expectedDataKeys = [\"id\", \"email\", \"first_name\", \"last_name\",\"avatar\"];",
									"        pm.test(\"Verify no extra fields in data object\", function () {",
									"            pm.expect(Object.keys(responseData.data)).to.have.members(expectedDataKeys);",
									"        });",
									"",
									"        // Expected keys for \"support\" object",
									"        const expectedSupportKeys = [\"url\", \"text\"];",
									"        pm.test(\"Verify no extra fields in support object\", function () {",
									"            pm.expect(Object.keys(responseData.support)).to.have.members(expectedSupportKeys);",
									"        });",
									"        break;",
									"",
									"    case 400:",
									"        pm.expect(status_code).to.eql(400);",
									"        break;",
									"    ",
									"    case 404:",
									"        pm.expect(status_code).to.eql(404);",
									"        break;",
									"",
									"    case 500:",
									"        pm.expect(status_code).to.eql(500);",
									"        break;",
									"",
									"    default:",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single User - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 404\", function () { pm.response.to.have.status(404); });\r",
									"\r",
									"pm.test(\"Verify Status Message\", function(){\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/23",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"23"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status_code = pm.response.code;",
									"const response_data = pm.response.json();",
									"",
									"switch(pm.response.code) {",
									"    case 201:",
									"        pm.test(\"Verify Status Code is 201\", function () {",
									"            pm.expect(pm.response.code).to.eql(201);",
									"        });",
									"",
									"        pm.test(\"Verify status message\", function() {",
									"            pm.expect(pm.response.to.have.status(\"Created\"));",
									"        });",
									"",
									"        pm.test(\"Verify name\", function(){",
									"            pm.expect(response_data.name).to.eql(pm.environment.get(\"name\"));",
									"        });",
									"",
									"        pm.test(\"Verify Job\", function(){",
									"            pm.expect(response_data.job).to.eql(pm.environment.get(\"job\"));",
									"        });",
									"",
									"        pm.test(\"Verify Response Schema\", function(){",
									"            pm.expect(response_data).to.have.all.keys(\"name\", \"job\", \"id\", \"createdAt\");",
									"        })",
									"        pm.environment.set(\"created_user_id\", response_data.id);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var name = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
									"pm.environment.set(\"name\", name);\r",
									"\r",
									"var job = pm.variables.replaceIn(\"{{$randomJobArea}}\");\r",
									"pm.environment.set(\"job\", job);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{name}}\",\n  \"job\": \"{{job}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User (PUT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseBody = pm.response.json();",
									"const status_code = pm.response.code;",
									"",
									"switch(status_code){",
									"    case 200:",
									"        pm.test(\"Status is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Status Message is OK\", function () {",
									"        pm.response.to.have.status(\"OK\");",
									"    });",
									"",
									"    pm.test(\"Verify Updated name\", function(){",
									"        pm.expect(responseBody.name).to.eql(pm.environment.get(\"updated_name\"));",
									"    });",
									"",
									"    pm.test(\"Verify Updated Job\", function(){",
									"        pm.expect(responseBody.job).to.eql(pm.environment.get(\"updated_job\"));",
									"    });",
									"",
									"    pm.test(\"Verify Response Schema\", function(){",
									"        pm.expect(responseBody).to.have.all.keys(\"name\", \"job\", \"updatedAt\");",
									"    });",
									"        break;",
									"",
									"    case 404:",
									"        pm.test(\"Status is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"",
									"    pm.test(\"Status Message is Not Found\", function () {",
									"        pm.response.to.have.status(\"Not Found\");",
									"    });",
									"    break;",
									"    default:",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var name = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
									"pm.environment.set(\"updated_name\", name);\r",
									"\r",
									"var job = pm.variables.replaceIn(\"{{$randomJobArea}}\");\r",
									"pm.environment.set(\"updated_job\", job);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{updated_name}}\",\n  \"job\": \"{{updated_job}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{created_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response status message is OK\", function(){",
									"    pm.expect(pm.response.status).to.include(\"OK\");",
									"});",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"morpheus\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{created_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Status code is 204\", function () {",
									"  pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Verify Status Message\", function () {",
									"  pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{created_user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "List Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"var status_code = pm.response.code;",
									"",
									"switch(status_code){",
									"    case 200:",
									"        pm.test(\"Status code name has string\", function () {",
									"            pm.response.to.have.status(\"OK\");",
									"        });",
									"",
									"        pm.test(\"Status is 200 OK\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"Response time is less than 250ms\", function () {",
									"            pm.expect(pm.response.responseTime).to.be.below(250);",
									"        });",
									"",
									"        pm.test(\"Verify Page:1\", function(){",
									"            pm.expect(responseData.page).to.eql(1);",
									"        });",
									"        ",
									"        pm.test(\"Verify Per Page:6\", function(){",
									"            pm.expect(responseData.per_page).to.eql(6);",
									"        });",
									"",
									"        pm.test(\"Verify Total Pages:2\", function(){",
									"            pm.expect(responseData.total_pages).to.eql(2);",
									"        });",
									"",
									"        pm.test(\"Verify required fields are present\", function(){",
									"            pm.expect(responseData).to.have.property('data');",
									"            pm.expect(responseData).to.have.property('support');",
									"            pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
									"",
									"            responseData.data.forEach(user => {",
									"                pm.expect(user).to.have.property('id');",
									"                pm.expect(user).to.have.property('name');",
									"                pm.expect(user).to.have.property('year');",
									"                pm.expect(user).to.have.property('color');",
									"                pm.expect(user).to.have.property('pantone_value');",
									"            });",
									"        });",
									"",
									"        pm.test(\"Verify JSON response schema\", function() {",
									"            pm.expect(responseData).to.be.an('object').that.includes.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
									"            pm.expect(responseData.support).to.have.all.keys('url', 'text');",
									"        });",
									"",
									"        break;",
									"",
									"    case 400:",
									"        pm.expect(status_code).to.eql(400);",
									"        break;",
									"",
									"    case 500:",
									"        pm.expect(status_code).to.eql(500);",
									"        default:",
									"        break;",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/unknown",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"unknown"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();",
									"var status_code = pm.response.code;",
									"",
									"switch(status_code){",
									"    case 200:",
									"        pm.test(\"Status code name has string\", function () {",
									"            pm.response.to.have.status(\"OK\");",
									"        });",
									"",
									"        pm.test(\"Status is 200 OK\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"Verify required fields are present\", function(){",
									"            pm.expect(responseData).to.have.property('data');",
									"            pm.expect(responseData).to.have.property('support');",
									"",
									"            if (Array.isArray(responseData.data)) {",
									"                responseData.data.forEach(user => {",
									"                    pm.expect(user).to.have.property('id');",
									"                    pm.expect(user).to.have.property('name');",
									"                    pm.expect(user).to.have.property('year');",
									"                    pm.expect(user).to.have.property('color');",
									"                    pm.expect(user).to.have.property('pantone_value');",
									"                });",
									"            } else {",
									"                pm.expect(responseData.data).to.be.an('object').that.includes.all.keys('id', 'name', 'year', 'color', 'pantone_value');",
									"            }",
									"        });",
									"",
									"        pm.test(\"Verify JSON response schema\", function() {",
									"            pm.expect(responseData.data).to.be.an('object').that.includes.all.keys('id', 'name', 'year', 'color', 'pantone_value');",
									"            pm.expect(responseData.support).to.have.all.keys('url', 'text');",
									"        });",
									"",
									"        break;",
									"",
									"    case 400:",
									"        pm.expect(status_code).to.eql(400);",
									"        break;",
									"",
									"    case 500:",
									"        pm.expect(status_code).to.eql(500);",
									"        default:",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/unknown/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"unknown",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Resource - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Status is 404\", function () { pm.response.to.have.status(404); });\r",
									"pm.test(\"Verify Status is Not Found\", function () { pm.response.to.have.status(\"Not Found\"); });\r",
									"pm.test(\"Verify Response Time is less than 200ms\", function () { pm.expect(pm.response.responseTime).to.be.below(200); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/unknown/23",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"unknown",
								"23"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status_code = pm.response.code;",
									"",
									"switch(status_code){",
									"    case 200:",
									"        pm.test(\"Verify Status code\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"Verify Status Message\", function () {",
									"            pm.response.to.have.status(\"OK\");",
									"        });",
									"",
									"        pm.test(\"Verify Response Time\", function () {",
									"            pm.expect(pm.response.responseTime).to.be.below(2000);",
									"        });",
									"",
									"        pm.test(\"Verify Response Schema\", function(){",
									"            pm.expect(pm.response.json()).to.have.property(\"id\");",
									"            pm.expect(pm.response.json()).to.have.property(\"token\");",
									"        });",
									"",
									"    break;",
									"",
									"    case 400:",
									"        pm.test(\"Verify Status Code\", function(){",
									"           pm.response.to.have.status(200); ",
									"        });",
									"",
									"        pm.test(\"Verify Status Message\", function () {",
									"            pm.response.to.have.status(\"OK\");",
									"        });",
									"",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Unsuccessful (Missing password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400 Bad Request\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"try { const json = pm.response.json(); pm.test(\"Has error message\", () => pm.expect(json.error).to.exist); } catch(e) {}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"[email\\u00a0protected]\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const status_code = pm.response.code;",
									"",
									"switch(status_code){",
									"    case 200:",
									"        pm.test(\"Verify Status code\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"Verify Status Message\", function () {",
									"            pm.response.to.have.status(\"OK\");",
									"        });",
									"",
									"        pm.test(\"Verify Response Time\", function () {",
									"            pm.expect(pm.response.responseTime).to.be.below(2000);",
									"        });",
									"",
									"        pm.test(\"Verify Response Schema\", function(){",
									"            pm.expect(pm.response.json()).to.have.property(\"token\");",
									"        });",
									"",
									"    break;",
									"",
									"    case 400:",
									"        pm.test(\"Verify Status Code\", function(){",
									"           pm.response.to.have.status(200); ",
									"        });",
									"",
									"        pm.test(\"Verify Status Message\", function () {",
									"            pm.response.to.have.status(\"OK\");",
									"        });",
									"",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Unsuccessful (Missing password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"const status_code = pm.response.code;",
									"",
									"switch(status_code){",
									"    // case 200:",
									"    //     pm.test(\"Verify Status code\", function () {",
									"    //         pm.response.to.have.status(200);",
									"    //     });",
									"",
									"    //     pm.test(\"Verify Status Message\", function () {",
									"    //         pm.response.to.have.status(\"OK\");",
									"    //     });",
									"",
									"    //     pm.test(\"Verify Response Time\", function () {",
									"    //         pm.expect(pm.response.responseTime).to.be.below(2000);",
									"    //     });",
									"",
									"    //     pm.test(\"Verify Response Schema\", function(){",
									"    //         pm.expect(pm.response.json()).to.have.property(\"id\");",
									"    //         pm.expect(pm.response.json()).to.have.property(\"token\");",
									"    //     });",
									"",
									"    // break;",
									"",
									"    case 400:",
									"        pm.test(\"Verify Status Code\", function(){",
									"           pm.response.to.have.status(400); ",
									"        });",
									"",
									"        pm.test(\"Verify Status Message\", function () {",
									"            pm.response.to.have.status(\"Bad Request\");",
									"        });",
									"",
									"        pm.test(\"Verify Error Message\", function(){",
									"            pm.expect(responseBody.error).to.eql(\"Missing password\");",
									"        });",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"peter@klaven\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Misc",
			"item": [
				{
					"name": "Delayed Response",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200 OK\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users?delay={{delay}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "delay",
									"value": "{{delay}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{api_key}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "https://reqres.in/api"
		},
		{
			"key": "api_key",
			"value": "reqres-free-v1"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "page",
			"value": "2"
		},
		{
			"key": "delay",
			"value": "3"
		}
	]
}